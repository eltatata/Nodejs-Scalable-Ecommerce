services:
  # API Gateway
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    container_name: api-gateway
    ports:
      - "3000:3000"
    volumes:
      - ./api-gateway/.env:/app/.env
    networks:
      - public-network
      - ecommerce-network
    depends_on:
      - user-service
      - product-catalog-service
      - shopping-cart-service
      - order-service
      - notification-service
      - payment-service

  # Microservices
  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile
    container_name: user-service
    volumes:
      - ./user-service/.env:/app/.env
    networks:
      - ecommerce-network
    depends_on:
      - user-mongodb

  product-catalog-service:
    build:
      context: ./product-catalog-service
      dockerfile: Dockerfile
    container_name: product-catalog-service
    volumes:
      - ./product-catalog-service/.env:/app/.env
    networks:
      - ecommerce-network
    depends_on:
      - product-catalog-mongodb

  shopping-cart-service:
    build:
      context: ./shopping-cart-service
      dockerfile: Dockerfile
    container_name: shopping-cart-service
    volumes:
      - ./shopping-cart-service/.env:/app/.env
    networks:
      - ecommerce-network
    depends_on:
      - shopping-cart-mongodb

  order-service:
    build:
      context: ./order-service
      dockerfile: Dockerfile
    container_name: order-service
    volumes:
      - ./order-service/.env:/app/.env
    networks:
      - ecommerce-network
    depends_on:
      - order-mongodb

  notification-service:
    build:
      context: ./notification-service
      dockerfile: Dockerfile
    container_name: notification-service
    volumes:
      - ./notification-service/.env:/app/.env
    networks:
      - ecommerce-network

  payment-service:
    build:
      context: ./payment-service
      dockerfile: Dockerfile
    container_name: payment-service
    volumes:
      - ./payment-service/.env:/app/.env
    environment:
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
    networks:
      - ecommerce-network

  # Stripe CLI
  stripe-cli:
    image: stripe/stripe-cli:latest
    command: listen --forward-to http://host.docker.internal:3000/webhook
    environment:
      STRIPE_API_KEY: ${STRIPE_SECRET_KEY}
    networks:
      - ecommerce-network

  # Databases
  user-mongodb:
    image: mongo:latest
    container_name: user-mongodb
    ports:
      - "27017:27017"
    volumes:
      - ./volumes/user-mongodb-data:/data/db
    networks:
      - ecommerce-network

  product-catalog-mongodb:
    image: mongo:latest
    container_name: product-catalog-mongodb
    ports:
      - "27018:27017"
    volumes:
      - ./volumes/product-catalog-mongodb-data:/data/db
    networks:
      - ecommerce-network

  shopping-cart-mongodb:
    image: mongo:latest
    container_name: shopping-cart-mongodb
    ports:
      - "27019:27017"
    volumes:
      - ./volumes/shopping-cart-mongodb-data:/data/db
    networks:
      - ecommerce-network

  order-mongodb:
    image: mongo:latest
    container_name: order-mongodb
    ports:
      - "27020:27017"
    volumes:
      - ./volumes/order-mongodb-data:/data/db
    networks:
      - ecommerce-network

networks:
  public-network:
    driver: bridge
    internal: false
  ecommerce-network:
    driver: bridge